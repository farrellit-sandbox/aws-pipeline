{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "A stack that, given an ECR repo, can create an ASG and launch config",
    "Parameters": {
        "RepositoryName": {
            "Description": "The name of the ECR image to pull out of this account/region's ECR",
            "Type": "String"
        },
        "ImageTag": { 
          "Type": "String",
          "Description": "Docker image tag to pull"
        },
        "ApplicationName": { "Type": "String", "Description": "For classification purposes" },
        "AppSubnets": { "Type": "List<AWS::EC2::Subnet::Id>", "Description": "subnet(s) to use" },
        "LoadBalancerSubnets": { "Type": "List<AWS::EC2::Subnet::Id>", "Description": "subnet(s) to use" },
        "Environment": { "Type": "String", "Description": "For classification purposes" },
        "LogRetentionInDays": { "Type": "Number", "Default": "14" },
        "KeyName": { "Type": "String", "Default": "" },
        "ImageId": { "Type": "String", "Default": "" },
        "InstanceType": { "Type": "String", "Default": "t2.nano" }
    },
    "Conditions": {
      "OmitSshKey": { "Fn::Equals": [ { "Ref": "KeyName" } , "" ] }
    },
    "Resources": {
        "ApplicationLogGroup": {   
            "Properties": {
                "LogGroupName": { "Fn::Sub": "${Environment}-${ApplicationName}" },
                "RetentionInDays": { "Ref": "LogRetentionInDays" }
            },
            "Type": "AWS::Logs::LogGroup"
        },
        "ApplicationASG": {
            "Properties": {
                "Cooldown": "90",
                "DesiredCapacity": "1",
                "HealthCheckGracePeriod": "180",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": { "Ref": "LaunchConfig" },
                "MaxSize": "2",
                "MinSize": "1",
                "Tags": [
                    { "Key": "app", "PropagateAtLaunch": true, "Value": { "Ref": "ApplicationName" } },
                    { "Key": "environment", "PropagateAtLaunch": true, "Value": { "Ref": "Environment" } }
                ],
                "VPCZoneIdentifier": { "Ref": "AppSubnets" }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": 1,
                    "MinInstancesInService": 1,
                    "PauseTime": "PT5M",
                    "SuspendProcesses": [
                        "HealthCheck",
                        "ReplaceUnhealthy",
                        "AZRebalance",
                        "AlarmNotification",
                        "ScheduledActions"
                    ],
                    "WaitOnResourceSignals": true
                }
            }
        },
        "LaunchConfig": {
            "Properties": {
                "IamInstanceProfile": { "Ref": "ApplicationProfile" },
                "ImageId": { "Ref": "ImageId" },
                "InstanceType":  { "Ref": "InstanceType" },
                "KeyName": { "Fn::If": [ "OmitSshKey", {"Ref": "AWS::NoValue" }, { "Ref": "KeyName" } ] },
                "SecurityGroups":  [],
                "UserData": { "Fn::Base64": { "Fn::Join": [ "\n", [
                  "#!/bin/bash -ex",
                  "function finish { ",
                  "  exit_code=${1:-99};",
                  "  shift",
                  "  /opt/aws/bin/cfn-signal -e $exit_code --stack ${AWS::StackName} --region ${AWS::Region} --resource 'ApplicationASG' $@; ",
                  "  [[ $exit_code == 0 ]] && trap - EXIT ; ",
                  "  exit $exit_code;",
                  "}",
                  "trap finish EXIT",
                  "# get instance id for logging",
                  "export INSTANCE_ID=\"`curl 169.254.169.254/latest/meta-data/instance-id`\"",
                  "#determine whether we need no-include-email",
                  "set +e; docker login -e  </dev/null >/dev/null; if [ $? == 125 ]; then incemail=--no-include-email;fi; set -e",
                  "eval `aws --region ${AWS::Region} ecr get-login $incemail`",
                  "# run application in daemonic mode",
                  "# TODO: expose environment file",
                  "docker run -d \\",
                  "  --log-driver=awslogs \\",
                  "    --log-opt tag=\"${Environment}-${ApplicationName}/$INSTANCE_ID/{{.ID}}\" \\",
                  "    --log-opt awslogs-region=${AWS::Region} \\",
                  "    --log-opt awslogs-group=${ApplicationLogGroup} \\",
                  "  --restart=always",
                  "  -e AWS_REGION=${AWS::Region} \\",
                  "  -e AWS_STACK_NAME=${AWS::StackName} \\",
                  "  -e AWS_STACK_ID=${AWS::StackId} \\",
                  "${DockerPorts} \\", 
                  " ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ImageTag}",
                  "finish 0"
                ] ] } }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ApplicationProfile": {
            "Properties": {
                "Path": "/app/${Environment}/${ApplicationName}/",
                "Roles": [ { "Ref": "ApplicationRole" } ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "ApplicationRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [ "sts:AssumeRole" ],
                            "Condition": { "Bool": { "aws:MultiFactorAuthPresent": "true" } },
                            "Effect": "Allow",
                            "Principal": { "AWS": { "Ref": "AWS::AccountId" } }
                        },
                        {
                            "Action": [ "sts:AssumeRole" ],
                            "Effect": "Allow",
                            "Principal": { "Service": [ "ec2.amazonaws.com" ] }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/app/${Environment}/${ApplicationName}/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ecr:GetAuthorizationToken"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:BatchGetImage",
                                        "ecr:GetDownloadUrlForLayer"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [ { "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}" } ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [ { "Fn::GetAtt": [ "ApplicationLogGroup", "Arn" ] } ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "app-platform-policy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
